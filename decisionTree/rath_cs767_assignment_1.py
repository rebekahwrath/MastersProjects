# -*- coding: utf-8 -*-
"""Rath_CS767_Assignment 1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HcW8ANlUnyAJ5q1rFCRm_eg6Z2f3vmds
"""

# importing my data

import pandas as pd

from google.colab import files
uploaded_files = files.upload()

import io
byte_data = uploaded_files['Sleep_health_and_lifestyle_dataset.csv']

# Convert byte data to a file-like object using BytesIO
file_like = io.BytesIO(byte_data)

# Read the CSV file into a Pandas DataFrame
df = pd.read_csv(file_like, encoding='utf-8-sig')

# Display the first few rows of the DataFrame
df.head()

# from the professor

#INTENT: System, graphics, file locations prepared AND save_fig() defined

# Implementation of A. Geron, edited by Eric Braude

# Python ≥3.5 is required
import sys  #  constants, functions etc. of the Python interpreter
assert sys.version_info >= (3, 5)

# Scikit-Learn ≥0.20 is required
import sklearn
assert sklearn.__version__ >= "0.20"

# Common imports
import numpy as np
import os # functions for interacting portably with OS, e.g., file system

# With respect to randomness, this notebook's output will be same across runs
np.random.seed(42) # "42" is arbitrary (but unchanging)

# Commented out IPython magic to ensure Python compatibility.
# from the professor

# mpl is prepared to plot pretty figures inline (for notebook format)
# %matplotlib inline
import matplotlib as mpl
import matplotlib.pyplot as plt
mpl.rc('axes', labelsize=14)
mpl.rc('xtick', labelsize=12)
mpl.rc('ytick', labelsize=12)

# Constants for where to save the figures
PROJECT_ROOT_DIR = "."
CHAPTER_ID = "decision_trees"
IMAGES_PATH = os.path.join(PROJECT_ROOT_DIR, "images", CHAPTER_ID)
os.makedirs(IMAGES_PATH, exist_ok=True)

def save_fig(a_fig_id, a_tight_layout=True, a_fig_extension="png",
             a_resolution=300):

    path = os.path.join(IMAGES_PATH, a_fig_id + "." + a_fig_extension)
    print("Saving figure", a_fig_id)
    if a_tight_layout:
        plt.tight_layout()
    plt.savefig(path, format=a_fig_extension, dpi=a_resolution)

data = pd.DataFrame(df) # dataframe

#from professor, edited to fit my data

from sklearn.tree import DecisionTreeClassifier

X = data[['Sleep Duration','Stress Level', 'Age', 'Daily Steps', 'Physical Activity Level']] # predictors
print(X.head())
y = data['Quality of Sleep'] # target
print(y.head())

# https://scikit-learn.org/stable/modules/generated/sklearn.tree.DecisionTreeClassifier.html
# Use gini measure (criterion{“gini”, “entropy”, “log_loss”}, default=”gini”); tree depth 2
model = DecisionTreeClassifier(max_depth=2, random_state=42) # definition
# Apply the CART (classification and regression tree) algorithm
model.fit(X, y) #

# predict one sample at a time
input1 = pd.DataFrame([[7, 5, 26, 5000, 50]], columns=['Sleep Duration','Stress Level', 'Age', 'Daily Steps', 'Physical Activity Level']) # one sample at a time predict
prediction1 = model.predict(input1)
print(prediction1)

from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score, classification_report

# Split the data
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Train the model
model.fit(X_train, y_train)

# Make predictions
y_pred = model.predict(X_test)

# Calculate accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')

# Classification report
print(classification_report(y_test, y_pred))

import matplotlib.pyplot as plt
from sklearn.tree import plot_tree

plt.figure(figsize=(12, 8))
plot_tree(model, feature_names=X.columns, filled=True)
plt.show()

input2 = pd.DataFrame([[4, 9, 43, 2000, 20]], columns=['Sleep Duration','Stress Level', 'Age', 'Daily Steps', 'Physical Activity Level']) # one sample at a time predict
prediction2 = model.predict(input2)
print(prediction2)