# -*- coding: utf-8 -*-
"""strokeProbability.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Topg6nA-wkhX3tM4cM7YiBXUS7Ce_pAr
"""

### FROM KAGGLE

import kagglehub

# Download latest version
path = kagglehub.dataset_download("fedesoriano/stroke-prediction-dataset")

print("Path to dataset files:", path)

import os

# List all files
files = os.listdir(path)
print(files)

import pandas as pd

# Define the path to the dataset file
dataset_file = os.path.join(path, 'healthcare-dataset-stroke-data.csv')

# Load the dataset into a data frame
df = pd.read_csv(dataset_file)

# Display the data frame
print(df.head())

# Data preprocessing

# Check for null values
print(df.isnull().sum())

df = df.dropna() # Drop null BMI values
print(df.isnull().sum())

# Converting categorical variables

from sklearn.preprocessing import LabelEncoder

label_encoder = LabelEncoder()

# Convert gender to 0 & 1
df['gender'] = label_encoder.fit_transform(df['gender'])

print(df.head())

df = pd.get_dummies(df, columns=['smoking_status'], drop_first=True) # Convert smoking status

print(df.head())

pip install pgmpy

from pgmpy.models import BayesianNetwork
from pgmpy.factors.discrete import TabularCPD
from pgmpy.inference import VariableElimination

import matplotlib.pyplot as plt
import networkx as nx

# Define the  structure
model = BayesianNetwork([
    ('age', 'hypertension'),             # Age influences hypertension
    ('age', 'heart_disease'),            # Age influences heart disease
    ('age', 'bmi'),                      # Age influences BMI
    ('age', 'smoking_status_smokes'),    # Age influences smoking status
    ('hypertension', 'stroke'),          # Hypertension influences stroke
    ('heart_disease', 'stroke'),         # Heart disease influences stroke
    ('bmi', 'stroke'),                   # BMI influences stroke
    ('smoking_status_smokes', 'stroke'),    # Smoking status influences stroke
    ('gender', 'heart_disease'),                # Gender influences heart disease
    ('avg_glucose_level', 'bmi')         # Glucose level influences BMI
])

# Visualize the structure
print("Nodes in the model:", model.nodes())
print("Edges in the model:", model.edges())

import matplotlib.pyplot as plt
import networkx as nx
from pgmpy.models import BayesianNetwork

# Create a networkx graph
graph = nx.DiGraph()  # Directed graph (since Bayesian Networks are directed)

# Add nodes and edges from the model structure
for parent, child in model.edges():
    graph.add_edge(parent, child)

plt.figure(figsize=(10, 8))
nx.draw(graph, with_labels=True, node_size=3000, node_color='skyblue', font_size=10, font_weight='bold', edge_color='gray')
plt.title("Bayesian Network for Stroke Prediction")
plt.show()

from pgmpy.estimators import BayesianEstimator

# Use Bayesian Estimation with smoothing to avoid zero probabilities
model.fit(df, estimator=BayesianEstimator, prior_type='BDeu', equivalent_sample_size=10)

# Print CPD details for each node
for cpd in model.cpds:
    print(f"CPD for {cpd.variable}:")
    print(f"  Variable Card: {cpd.variable_card}")  # Number of possible states for the variable
    print(f"  Variables (including parent(s)): {cpd.variables}")  # List of variables in the CPD (variable & parents)
    print(f"  Card of Parent(s): {cpd.cardinality}")  # Cardinality of each parent
    print("  ----------------------------")

from pgmpy.inference import VariableElimination

inference = VariableElimination(model)

# Query the model for the probability of stroke, given specific evidence
query = inference.query(variables=['stroke'], evidence={'age': 75, 'hypertension': 1, 'heart_disease': 1, 'smoking_status_smokes': 0})
print(query)

# Query the model for the probability of stroke, given specific evidence
query = inference.query(variables=['stroke'], evidence={'age': 23, 'bmi': 18, 'hypertension': 0, 'heart_disease': 0})
print(query)

df.head() # Current data frame

# EVALUATING THE MODEL

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score
from sklearn.preprocessing import LabelEncoder

# Step 1: Filter the dataframe to include only the specified columns
df = df[['age', 'bmi', 'gender', 'hypertension', 'heart_disease', 'smoking_status_smokes', 'avg_glucose_level', 'stroke']]

# Step 2: Handle categorical columns (gender, smoking_status) using Label Encoding
le = LabelEncoder()

# Apply LabelEncoder to 'gender' and 'smoking_status'
df['gender'] = le.fit_transform(df['gender'])  # Convert 'Male'/'Female' to 0/1
df['smoking_status_smokes'] = le.fit_transform(df['smoking_status_smokes'])  # Convert 'Yes'/'No' to 0/1

# Step 3: Split the data into features (X) and target (y)
X = df.drop(columns=['stroke'])  # Features
y = df['stroke']  # Target variable

# Step 4: Split into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Step 5: Create and train
model = LogisticRegression()
model.fit(X_train, y_train)

# Step 6: Make predictions
predictions = model.predict(X_test)

# Step 7: Evaluate
accuracy = accuracy_score(y_test, predictions)
precision = precision_score(y_test, predictions)
recall = recall_score(y_test, predictions)
f1 = f1_score(y_test, predictions)

# Step 8: Print the accuracy
print(f"Accuracy: {accuracy}")

from sklearn.metrics import roc_curve, roc_auc_score

# Calculate ROC curve
fpr, tpr, thresholds = roc_curve(y_test, model.predict_proba(X_test)[:, 1])

# Plot
plt.figure(figsize=(8, 6))
plt.plot(fpr, tpr, color='b', label='ROC curve (AUC = %0.2f)' % roc_auc_score(y_test, model.predict_proba(X_test)[:, 1]))
plt.plot([0, 1], [0, 1], color='gray', linestyle='--')
plt.title('Receiver Operating Characteristic (ROC) Curve')
plt.xlabel('False Positive Rate')
plt.ylabel('True Positive Rate')
plt.legend(loc='lower right')
plt.show()